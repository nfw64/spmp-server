package cinterop.mpv

import spms.player.Player
import kotlinx.cinterop.CPrimitiveVar
import kotlinx.cinterop.MemScope
import kotlin.reflect.KClass

typealias MpvFormat = Unit

class mpv_event {
    val event_id: Int get() = throw NotImplementedError()
}

abstract class LibMpvClient(
    val headless: Boolean = true,
    playlist_auto_progress: Boolean = true
): Player {
    companion object {
        fun isAvailable(): Boolean = false
    }

    init {
        throw NotImplementedError()
    }

    override fun release() { throw NotImplementedError() }

    internal fun runCommand(name: String, vararg args: Any?, check_result: Boolean = true): Int = throw NotImplementedError()
    internal inline fun <reified V> getProperty(name: String): V = throw NotImplementedError()
    internal inline fun <reified T: Any> setProperty(name: String, value: T) { throw NotImplementedError() }
    internal fun observeProperty(name: String, cls: KClass<*>) { throw NotImplementedError() }
    internal inline fun <reified T> MemScope.getPointerOf(v: T? = null): CPrimitiveVar = throw NotImplementedError()
    internal fun getFormatOf(cls: KClass<*>): MpvFormat = throw NotImplementedError()
    internal fun waitForEvent(): mpv_event? = throw NotImplementedError()
    internal fun requestLogMessages() { throw NotImplementedError() }
    internal fun addHook(name: String, priority: Int = 0) { throw NotImplementedError() }
    internal fun continueHook(id: ULong) { throw NotImplementedError() }
}
